;-------------------------------------------------------------------------
; The BBC Micro memory tester is free software: you can redistribute it
; and/or modify it under the terms of the GNU General Public License as
; published by the Free Software Foundation, either version 3 of the
; License, or (at your option) any later version.
;
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this code. If not, see <https://www.gnu.org/licenses/>.
;-------------------------------------------------------------------------

                .include "submodules/beeb/include/beeb.s65"

;-------------------------------------------------------------------------

print_nybble: .macro dest_addr
                clc
                sed
                adc #$90
                adc #$40
                cld
                sta \dest_addr
                .endm

;-------------------------------------------------------------------------

print_hex: .macro dest_addr
                sta reload_a+1
                lsr a
                lsr a
                lsr a
                lsr a
                .print_nybble \dest_addr+0
reload_a:
                lda #$ff
                and #$0f
                .print_nybble \dest_addr+1
                .endm

;-------------------------------------------------------------------------

print_message: .macro dest_addr,prefix,msb,lsb
                .for print_message__index=0,print_message__index<len(\prefix),print_message__index+=1
                lda #\prefix[print_message__index]
                sta \dest_addr+print_message__index
                .next

                lda \msb
                .print_hex \dest_addr+len(\prefix)
                
                .if \lsb>=0
                lda \lsb
                .print_hex \dest_addr+len(\prefix)+2
                .endif
                
                .endm

;-------------------------------------------------------------------------

; Assemble the code somewhere out of the way of the mode change, then
; relocate the test code as appropriate.

*=$2000
                .dsection code

;-------------------------------------------------------------------------

                .section code

start:
                lda #22
                jsr oswrch
                lda #mode
                jsr oswrch

                sei
                
                ; Force a full power-on reset after pressing BREAK.
                ; 
                ; https://stardot.org.uk/forums/viewtopic.php?t=17129
                lda #$7f
                sta $fe4e
                
                ldx #0
-
                .for i=0,i<code_end-code_begin+255,i+=256
                lda code_begin+i,x
                sta code_base_address+i,x
                .next
                inx
                bne -

                .if mode!=7
                lda #12
                sta $fe00
                lda #>(test_base_address>>3)
                sta $fe01

                lda #13
                sta $fe00
                lda #<(test_base_address>>3)
                sta $fe01
                .endif
                
                jmp main
                
code_begin:
                .logical code_base_address
main:

tester_loop:
                ldy #0
values_loop:
                ldx #0
                
                ; lda values,y
                ; .print_hex $7c00
                
                lda values,y
fill_loop:
                .for i=0,i<64,i+=1
                sta test_base_address+i*256,x
                .next
                inx
                bne fill_loop

                ldx #0
check_loop:
                .for i=0,i<64,i+=1
                lda test_base_address+i*256,x
                cmp values,y
                beq +
                sta actual_value
                stx bad_addr+0
                ldx #>(test_base_address+i*256)
                stx bad_addr+1
                lda values,y
                sta expected_value
                jmp bad
+
                .next
                inx
                bne check_loop

                iny
                cpy #values.end-values
                bne values_loop
                jmp tester_loop

bad:

                lda #$4a
                sta video_ula_control

                ldx #13
-
                stx $fe00
                lda mode7_crtc_values,x
                sta $fe01
                dex
                bpl -

                ldx #0
                lda #32
-
                sta $7c00,x
                sta $7d00,x
                sta $7e00,x
                sta $7f00,x
                inx
                bne -

                .print_message $7c00,"Addr:     &",bad_addr+1,bad_addr+0
                .print_message $7c28,"Expected: &",expected_value+0,-1
                .print_message $7c50,"Actual:   &",actual_value+0,-1

halt:
                jmp halt

bad_addr:
                .word 0
expected_value:
                .byte 0
actual_value:
                .byte 0

;-------------------------------------------------------------------------

mode7_crtc_values:
                .byte  $3F  ; 0 Horizontal Total     =64
                .byte  $28  ; 1 Horizontal Displayed =40
                .byte  $33  ; 2 Horizontal Sync      =&33  Note: &31 is a better value
                .byte  $24  ; 3 HSync Width+VSync    =&24  VSync=2, HSync=4
                .byte  $1E  ; 4 Vertical Total       =30
                .byte  $02  ; 5 Vertical Adjust      =2
                .byte  $19  ; 6 Vertical Displayed   =25
                .byte  $1B  ; 7 VSync Position       =&1B
                .byte  $93  ; 8 Interlace+Cursor     =&93  Cursor=2, Display=1, Interlace=Sync+Video
                .byte  $12  ; 9 Scan Lines/Character =19
                .byte  $72 ;10 Cursor Start Line    =&72  Blink=On, Speed=1/32, Line=18
                .byte  $13  ;11 Cursor End Line      =19
                .byte $28,$00   ;12,13 start address
                

;-------------------------------------------------------------------------

values: .block
                .byte 1,0,2,0,4,0,8,0,16,0,32,0,64,0,128,0
                .byte $aa,0
                .byte $55,0
end:
                .bend

                .here
code_end:
                .send
                